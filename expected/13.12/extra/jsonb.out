-- Before running this file User must create database jsonb_regress
-- databases on MongoDB with all permission for
-- user with password and ran mongodb_init.sh
-- file to load collections.
\set ECHO none
SET datestyle TO ISO;
--Testcase 1:
CREATE EXTENSION IF NOT EXISTS mongo_fdw;
--Testcase 2:
CREATE SERVER mongo_server FOREIGN DATA WRAPPER mongo_fdw
  OPTIONS (address :MONGO_HOST, port :MONGO_PORT);
--Testcase 3:
CREATE USER MAPPING FOR public SERVER mongo_server;
--constructors
-- row_to_json
--Testcase 4:
CREATE FOREIGN TABLE rows (_id name, x int, y text)
 SERVER mongo_server OPTIONS (database 'jsonb_regress', collection 'rows');
--Testcase 5:
EXPLAIN VERBOSE SELECT jsonb_agg(q ORDER BY x, y)
  FROM rows q;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=32)
   Output: jsonb_agg(q.* ORDER BY x, y)
   ->  Foreign Scan on public.rows q  (cost=0.00..0.00 rows=1000 width=160)
         Output: q.*, x, y
         Foreign Namespace: jsonb_regress.rows
         Query document: { "pipeline" : [ { "$project" : { "_id" : { "$numberInt" : "1" }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 6:
SELECT jsonb_agg(q ORDER BY x, y)
  FROM rows q;
                                                                                   jsonb_agg                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"x": 1, "y": "txt1", "_id": "60f0e4f744497a69702752d1"}, {"x": 2, "y": "txt2", "_id": "60f0e4fd44497a69702752d2"}, {"x": 3, "y": "txt3", "_id": "60f0e50144497a69702752d3"}]
(1 row)

--Testcase 7:
UPDATE rows SET x = NULL WHERE x = 1;
--Testcase 8:
EXPLAIN VERBOSE SELECT jsonb_agg(q ORDER BY x NULLS FIRST, y)
  FROM rows q;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=32)
   Output: jsonb_agg(q.* ORDER BY x NULLS FIRST, y)
   ->  Foreign Scan on public.rows q  (cost=0.00..0.00 rows=1000 width=160)
         Output: q.*, x, y
         Foreign Namespace: jsonb_regress.rows
         Query document: { "pipeline" : [ { "$project" : { "_id" : { "$numberInt" : "1" }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 9:
SELECT jsonb_agg(q ORDER BY x NULLS FIRST, y)
  FROM rows q;
                                                                                     jsonb_agg                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"x": null, "y": "txt1", "_id": "60f0e4f744497a69702752d1"}, {"x": 2, "y": "txt2", "_id": "60f0e4fd44497a69702752d2"}, {"x": 3, "y": "txt3", "_id": "60f0e50144497a69702752d3"}]
(1 row)

-- jsonb extraction functions
--Testcase 11:
CREATE FOREIGN TABLE test_jsonb (json_type text, test_json jsonb)
 SERVER mongo_server OPTIONS (database 'jsonb_regress', collection 'test_jsonb');
--Testcase 12:
EXPLAIN VERBOSE SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'scalar';
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: ((test_json -> 'x'::text))
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "scalar" } } }, { "$project" : { "ref0" : "$test_json.x", "ref1" : "$json_type" } } ] }
(4 rows)

--Testcase 13:
SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'scalar';
 ?column? 
----------
 
(1 row)

--Testcase 14:
EXPLAIN VERBOSE SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'array';
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: ((test_json -> 'x'::text))
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "ref0" : "$test_json.x", "ref1" : "$json_type" } } ] }
(4 rows)

--Testcase 15:
SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'array';
 ?column? 
----------
 []
(1 row)

--Testcase 16:
EXPLAIN VERBOSE SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'object';
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: ((test_json -> 'x'::text))
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "ref0" : "$test_json.x", "ref1" : "$json_type" } } ] }
(4 rows)

--Testcase 17:
SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'object';
 ?column? 
----------
 
(1 row)

--Testcase 18:
EXPLAIN VERBOSE SELECT test_json -> 'field2' FROM test_jsonb WHERE json_type = 'object';
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: ((test_json -> 'field2'::text))
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "ref0" : "$test_json.field2", "ref1" : "$json_type" } } ] }
(4 rows)

--Testcase 19:
SELECT test_json -> 'field2' FROM test_jsonb WHERE json_type = 'object';
 ?column? 
----------
 "val2"
(1 row)

--Testcase 20:
EXPLAIN VERBOSE SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'scalar';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field2'::text)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "scalar" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 21:
SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'scalar';
 ?column? 
----------
 
(1 row)

--Testcase 22:
EXPLAIN VERBOSE SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field2'::text)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 23:
SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'array';
 ?column? 
----------
 
(1 row)

--Testcase 24:
EXPLAIN VERBOSE SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field2'::text)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 25:
SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'object';
 ?column? 
----------
 val2
(1 row)

--Testcase 26:
EXPLAIN VERBOSE SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'scalar';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json -> 2)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "scalar" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 27:
SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'scalar';
 ?column? 
----------
 
(1 row)

--Testcase 28:
EXPLAIN VERBOSE SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json -> 2)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 29:
SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'array';
 ?column? 
----------
 "two"
(1 row)

--Testcase 30:
EXPLAIN VERBOSE SELECT test_json -> 9 FROM test_jsonb WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json -> 9)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 31:
SELECT test_json -> 9 FROM test_jsonb WHERE json_type = 'array';
 ?column? 
----------
 
(1 row)

--Testcase 32:
EXPLAIN VERBOSE SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json -> 2)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 33:
SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'object';
 ?column? 
----------
 
(1 row)

--Testcase 34:
EXPLAIN VERBOSE SELECT test_json ->> 6 FROM test_jsonb WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 6)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 35:
SELECT test_json ->> 6 FROM test_jsonb WHERE json_type = 'array';
 ?column?  
-----------
 [1, 2, 3]
(1 row)

--Testcase 36:
EXPLAIN VERBOSE SELECT test_json ->> 7 FROM test_jsonb WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 7)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 37:
SELECT test_json ->> 7 FROM test_jsonb WHERE json_type = 'array';
 ?column?  
-----------
 {"f1": 9}
(1 row)

--Testcase 38:
EXPLAIN VERBOSE SELECT test_json ->> 'field4' FROM test_jsonb WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field4'::text)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 39:
SELECT test_json ->> 'field4' FROM test_jsonb WHERE json_type = 'object';
 ?column? 
----------
 4
(1 row)

--Testcase 40:
EXPLAIN VERBOSE SELECT test_json ->> 'field5' FROM test_jsonb WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field5'::text)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 41:
SELECT test_json ->> 'field5' FROM test_jsonb WHERE json_type = 'object';
 ?column?  
-----------
 [1, 2, 3]
(1 row)

--Testcase 42:
EXPLAIN VERBOSE SELECT test_json ->> 'field6' FROM test_jsonb WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field6'::text)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 43:
SELECT test_json ->> 'field6' FROM test_jsonb WHERE json_type = 'object';
 ?column?  
-----------
 {"f1": 9}
(1 row)

--Testcase 44:
EXPLAIN VERBOSE SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'scalar';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 2)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "scalar" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 45:
SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'scalar';
 ?column? 
----------
 
(1 row)

--Testcase 46:
EXPLAIN VERBOSE SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 2)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 47:
SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'array';
 ?column? 
----------
 two
(1 row)

--Testcase 48:
EXPLAIN VERBOSE SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 2)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 49:
SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'object';
 ?column? 
----------
 
(1 row)

--Testcase 50:
EXPLAIN VERBOSE SELECT jsonb_object_keys(test_json) FROM test_jsonb WHERE json_type = 'scalar';
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 ProjectSet  (cost=0.00..507.50 rows=100000 width=32)
   Output: jsonb_object_keys(test_json)
   ->  Foreign Scan on public.test_jsonb  (cost=0.00..0.00 rows=1000 width=32)
         Output: json_type, test_json
         Foreign Namespace: jsonb_regress.test_jsonb
         Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "scalar" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 51:
SELECT jsonb_object_keys(test_json) FROM test_jsonb WHERE json_type = 'scalar';
ERROR:  cannot call jsonb_object_keys on a scalar
--Testcase 52:
EXPLAIN VERBOSE SELECT jsonb_object_keys(test_json) FROM test_jsonb WHERE json_type = 'array';
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 ProjectSet  (cost=0.00..507.50 rows=100000 width=32)
   Output: jsonb_object_keys(test_json)
   ->  Foreign Scan on public.test_jsonb  (cost=0.00..0.00 rows=1000 width=32)
         Output: json_type, test_json
         Foreign Namespace: jsonb_regress.test_jsonb
         Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 53:
SELECT jsonb_object_keys(test_json) FROM test_jsonb WHERE json_type = 'array';
ERROR:  cannot call jsonb_object_keys on an array
--Testcase 54:
EXPLAIN VERBOSE SELECT jsonb_object_keys(test_json) FROM test_jsonb WHERE json_type = 'object';
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 ProjectSet  (cost=0.00..507.50 rows=100000 width=32)
   Output: jsonb_object_keys(test_json)
   ->  Foreign Scan on public.test_jsonb  (cost=0.00..0.00 rows=1000 width=32)
         Output: json_type, test_json
         Foreign Namespace: jsonb_regress.test_jsonb
         Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 55:
SELECT jsonb_object_keys(test_json) FROM test_jsonb WHERE json_type = 'object';
 jsonb_object_keys 
-------------------
 field1
 field2
 field3
 field4
 field5
 field6
(6 rows)

-- nulls
--Testcase 56:
EXPLAIN VERBOSE SELECT (test_json->'field3') IS NULL AS expect_false FROM test_jsonb WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=1)
   Output: ((test_json -> 'field3'::text) IS NULL)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 57:
SELECT (test_json->'field3') IS NULL AS expect_false FROM test_jsonb WHERE json_type = 'object';
 expect_false 
--------------
 f
(1 row)

--Testcase 58:
EXPLAIN VERBOSE SELECT (test_json->>'field3') IS NULL AS expect_true FROM test_jsonb WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=1)
   Output: ((test_json ->> 'field3'::text) IS NULL)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 59:
SELECT (test_json->>'field3') IS NULL AS expect_true FROM test_jsonb WHERE json_type = 'object';
 expect_true 
-------------
 t
(1 row)

--Testcase 60:
EXPLAIN VERBOSE SELECT (test_json->3) IS NULL AS expect_false FROM test_jsonb WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=1)
   Output: ((test_json -> 3) IS NULL)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 61:
SELECT (test_json->3) IS NULL AS expect_false FROM test_jsonb WHERE json_type = 'array';
 expect_false 
--------------
 f
(1 row)

--Testcase 62:
EXPLAIN VERBOSE SELECT (test_json->>3) IS NULL AS expect_true FROM test_jsonb WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_jsonb  (cost=0.00..2.50 rows=1000 width=1)
   Output: ((test_json ->> 3) IS NULL)
   Foreign Namespace: jsonb_regress.test_jsonb
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 63:
SELECT (test_json->>3) IS NULL AS expect_true FROM test_jsonb WHERE json_type = 'array';
 expect_true 
-------------
 t
(1 row)

-- array exists - array elements should behave as keys
--Testcase 64:
CREATE FOREIGN TABLE testjsonb (_id int4, j jsonb)
 SERVER mongo_server OPTIONS (database 'jsonb_regress', collection 'testjsonb');
--Testcase 65:
EXPLAIN VERBOSE SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: ((testjsonb.j -> 'array'::text) ? 'bar'::text)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 66:
SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar';
 count 
-------
     3
(1 row)

-- type sensitive array exists - should return no rows (since "exists" only
-- matches strings that are either object keys or array elements)
--Testcase 67:
EXPLAIN VERBOSE SELECT count(*) from testjsonb  WHERE j->'array' ? '5'::text;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: ((testjsonb.j -> 'array'::text) ? '5'::text)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 68:
SELECT count(*) from testjsonb  WHERE j->'array' ? '5'::text;
 count 
-------
     0
(1 row)

-- However, a raw scalar is *contained* within the array
--Testcase 69:
EXPLAIN VERBOSE SELECT count(*) from testjsonb  WHERE j->'array' @> '5'::jsonb;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: ((testjsonb.j -> 'array'::text) @> '5'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 70:
SELECT count(*) from testjsonb  WHERE j->'array' @> '5'::jsonb;
 count 
-------
     1
(1 row)

-- indexing
--Testcase 71:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": null}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 72:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
 count 
-------
     1
(1 row)

--Testcase 73:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": "CC"}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 74:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
 count 
-------
    15
(1 row)

--Testcase 75:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": "CC", "public": true}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 76:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
 count 
-------
     2
(1 row)

--Testcase 77:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"age": 25}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 78:
SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
 count 
-------
     2
(1 row)

--Testcase 79:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"age": 25.0}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 80:
SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
 count 
-------
     2
(1 row)

--Testcase 81:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j ? 'public';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j ? 'public'::text)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 82:
SELECT count(*) FROM testjsonb WHERE j ? 'public';
 count 
-------
   194
(1 row)

--Testcase 83:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j ? 'bar';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j ? 'bar'::text)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 84:
SELECT count(*) FROM testjsonb WHERE j ? 'bar';
 count 
-------
     0
(1 row)

--Testcase 85:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j ?| ARRAY['public','disabled'];
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j ?| '{public,disabled}'::text[])
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 86:
SELECT count(*) FROM testjsonb WHERE j ?| ARRAY['public','disabled'];
 count 
-------
   337
(1 row)

--Testcase 87:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j ?& ARRAY['public','disabled'];
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j ?& '{public,disabled}'::text[])
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 88:
SELECT count(*) FROM testjsonb WHERE j ?& ARRAY['public','disabled'];
 count 
-------
    42
(1 row)

--Testcase 89:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."wait" == null)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 90:
SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null';
 count 
-------
     1
(1 row)

--Testcase 91:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '"CC" == $.wait';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '("CC" == $."wait")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 92:
SELECT count(*) FROM testjsonb WHERE j @@ '"CC" == $.wait';
 count 
-------
    15
(1 row)

--Testcase 93:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == "CC" && true == $.public';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."wait" == "CC" && true == $."public")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 94:
SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == "CC" && true == $.public';
 count 
-------
     2
(1 row)

--Testcase 95:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."age" == 25)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 96:
SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25';
 count 
-------
     2
(1 row)

--Testcase 97:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."age" == 25.0)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 98:
SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0';
 count 
-------
     2
(1 row)

--Testcase 99:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 100:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)';
 count 
-------
  1012
(1 row)

--Testcase 101:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."public")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 102:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public)';
 count 
-------
   194
(1 row)

--Testcase 103:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.bar)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 104:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.bar)';
 count 
-------
     0
(1 row)

--Testcase 105:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) || exists($.disabled)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '(exists ($."public") || exists ($."disabled"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 106:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) || exists($.disabled)';
 count 
-------
   337
(1 row)

--Testcase 107:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) && exists($.disabled)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '(exists ($."public") && exists ($."disabled"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 108:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) && exists($.disabled)';
 count 
-------
    42
(1 row)

--Testcase 109:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."wait"?(@ == null)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 110:
SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)';
 count 
-------
     1
(1 row)

--Testcase 111:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? ("CC" == @)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."wait"?("CC" == @)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 112:
SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? ("CC" == @)';
 count 
-------
    15
(1 row)

--Testcase 113:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == "CC" && true == @.public)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$?(@."wait" == "CC" && true == @."public")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 114:
SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == "CC" && true == @.public)';
 count 
-------
     2
(1 row)

--Testcase 115:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."age"?(@ == 25)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 116:
SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)';
 count 
-------
     2
(1 row)

--Testcase 117:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$?(@."age" == 25.0)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 118:
SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)';
 count 
-------
     2
(1 row)

--Testcase 119:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 120:
SELECT count(*) FROM testjsonb WHERE j @? '$';
 count 
-------
  1012
(1 row)

--Testcase 121:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.public';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."public"'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 122:
SELECT count(*) FROM testjsonb WHERE j @? '$.public';
 count 
-------
   194
(1 row)

--Testcase 123:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.bar';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."bar"'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 124:
SELECT count(*) FROM testjsonb WHERE j @? '$.bar';
 count 
-------
     0
(1 row)

--Testcase 125:
CREATE INDEX jidx ON testjsonb USING gin (j);
ERROR:  cannot create index on foreign table "testjsonb"
--Testcase 126:
SET enable_seqscan = off;
--Testcase 127:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": null}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 128:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
 count 
-------
     1
(1 row)

--Testcase 129:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": "CC"}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 130:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
 count 
-------
    15
(1 row)

--Testcase 131:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": "CC", "public": true}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 132:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
 count 
-------
     2
(1 row)

--Testcase 133:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"age": 25}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 134:
SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
 count 
-------
     2
(1 row)

--Testcase 135:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"age": 25.0}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 136:
SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
 count 
-------
     2
(1 row)

--Testcase 137:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"array":["foo"]}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"array": ["foo"]}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 138:
SELECT count(*) FROM testjsonb WHERE j @> '{"array":["foo"]}';
 count 
-------
     3
(1 row)

--Testcase 139:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"array":["bar"]}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"array": ["bar"]}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 140:
SELECT count(*) FROM testjsonb WHERE j @> '{"array":["bar"]}';
 count 
-------
     3
(1 row)

-- exercise GIN_SEARCH_MODE_ALL
--Testcase 141:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 142:
SELECT count(*) FROM testjsonb WHERE j @> '{}';
 count 
-------
  1012
(1 row)

--Testcase 143:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j ? 'public';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j ? 'public'::text)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 144:
SELECT count(*) FROM testjsonb WHERE j ? 'public';
 count 
-------
   194
(1 row)

--Testcase 145:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j ? 'bar';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j ? 'bar'::text)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 146:
SELECT count(*) FROM testjsonb WHERE j ? 'bar';
 count 
-------
     0
(1 row)

--Testcase 147:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j ?| ARRAY['public','disabled'];
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j ?| '{public,disabled}'::text[])
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 148:
SELECT count(*) FROM testjsonb WHERE j ?| ARRAY['public','disabled'];
 count 
-------
   337
(1 row)

--Testcase 149:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j ?& ARRAY['public','disabled'];
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j ?& '{public,disabled}'::text[])
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 150:
SELECT count(*) FROM testjsonb WHERE j ?& ARRAY['public','disabled'];
 count 
-------
    42
(1 row)

--Testcase 151:
EXPLAIN (COSTS OFF)
SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null';
                      QUERY PLAN                       
-------------------------------------------------------
 Aggregate
   ->  Foreign Scan on testjsonb
         Filter: (j @@ '($."wait" == null)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
(4 rows)

--Testcase 152:
SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null';
 count 
-------
     1
(1 row)

--Testcase 153:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.wait == null))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($?(@."wait" == null))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 154:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.wait == null))';
 count 
-------
     1
(1 row)

--Testcase 155:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.wait ? (@ == null))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."wait"?(@ == null))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 156:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.wait ? (@ == null))';
 count 
-------
     1
(1 row)

--Testcase 157:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '"CC" == $.wait';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '("CC" == $."wait")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 158:
SELECT count(*) FROM testjsonb WHERE j @@ '"CC" == $.wait';
 count 
-------
    15
(1 row)

--Testcase 159:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == "CC" && true == $.public';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."wait" == "CC" && true == $."public")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 160:
SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == "CC" && true == $.public';
 count 
-------
     2
(1 row)

--Testcase 161:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."age" == 25)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 162:
SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25';
 count 
-------
     2
(1 row)

--Testcase 163:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."age" == 25.0)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 164:
SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0';
 count 
-------
     2
(1 row)

--Testcase 165:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == "foo"';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."array"[*] == "foo")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 166:
SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == "foo"';
 count 
-------
     3
(1 row)

--Testcase 167:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == "bar"';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."array"[*] == "bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 168:
SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == "bar"';
 count 
-------
     3
(1 row)

--Testcase 169:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.array[*] == "bar"))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($?(@."array"[*] == "bar"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 170:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.array[*] == "bar"))';
 count 
-------
     3
(1 row)

--Testcase 171:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array ? (@[*] == "bar"))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."array"?(@[*] == "bar"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 172:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array ? (@[*] == "bar"))';
 count 
-------
     3
(1 row)

--Testcase 173:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array[*] ? (@ == "bar"))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."array"[*]?(@ == "bar"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 174:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array[*] ? (@ == "bar"))';
 count 
-------
     3
(1 row)

--Testcase 175:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 176:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)';
 count 
-------
  1012
(1 row)

--Testcase 177:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."public")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 178:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public)';
 count 
-------
   194
(1 row)

--Testcase 179:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.bar)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 180:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.bar)';
 count 
-------
     0
(1 row)

--Testcase 181:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) || exists($.disabled)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '(exists ($."public") || exists ($."disabled"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 182:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) || exists($.disabled)';
 count 
-------
   337
(1 row)

--Testcase 183:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) && exists($.disabled)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '(exists ($."public") && exists ($."disabled"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 184:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) && exists($.disabled)';
 count 
-------
    42
(1 row)

--Testcase 185:
EXPLAIN (COSTS OFF)
SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)';
                       QUERY PLAN                        
---------------------------------------------------------
 Aggregate
   ->  Foreign Scan on testjsonb
         Filter: (j @? '$."wait"?(@ == null)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
(4 rows)

--Testcase 186:
SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)';
 count 
-------
     1
(1 row)

--Testcase 187:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? ("CC" == @)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."wait"?("CC" == @)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 188:
SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? ("CC" == @)';
 count 
-------
    15
(1 row)

--Testcase 189:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == "CC" && true == @.public)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$?(@."wait" == "CC" && true == @."public")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 190:
SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == "CC" && true == @.public)';
 count 
-------
     2
(1 row)

--Testcase 191:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."age"?(@ == 25)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 192:
SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)';
 count 
-------
     2
(1 row)

--Testcase 193:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$?(@."age" == 25.0)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 194:
SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)';
 count 
-------
     2
(1 row)

--Testcase 195:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.array[*] == "bar")';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$?(@."array"[*] == "bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 196:
SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.array[*] == "bar")';
 count 
-------
     3
(1 row)

--Testcase 197:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.array ? (@[*] == "bar")';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."array"?(@[*] == "bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 198:
SELECT count(*) FROM testjsonb WHERE j @? '$.array ? (@[*] == "bar")';
 count 
-------
     3
(1 row)

--Testcase 199:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.array[*] ? (@ == "bar")';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."array"[*]?(@ == "bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 200:
SELECT count(*) FROM testjsonb WHERE j @? '$.array[*] ? (@ == "bar")';
 count 
-------
     3
(1 row)

--Testcase 201:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 202:
SELECT count(*) FROM testjsonb WHERE j @? '$';
 count 
-------
  1012
(1 row)

--Testcase 203:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.public';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."public"'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 204:
SELECT count(*) FROM testjsonb WHERE j @? '$.public';
 count 
-------
   194
(1 row)

--Testcase 205:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.bar';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."bar"'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 206:
SELECT count(*) FROM testjsonb WHERE j @? '$.bar';
 count 
-------
     0
(1 row)

-- array exists - array elements should behave as keys (for GIN index scans too)
--Testcase 207:
CREATE INDEX jidx_array ON testjsonb USING gin((j->'array'));
ERROR:  cannot create index on foreign table "testjsonb"
--Testcase 208:
EXPLAIN VERBOSE SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: ((testjsonb.j -> 'array'::text) ? 'bar'::text)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 209:
SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar';
 count 
-------
     3
(1 row)

-- type sensitive array exists - should return no rows (since "exists" only
-- matches strings that are either object keys or array elements)
--Testcase 210:
EXPLAIN VERBOSE SELECT count(*) from testjsonb  WHERE j->'array' ? '5'::text;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: ((testjsonb.j -> 'array'::text) ? '5'::text)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 211:
SELECT count(*) from testjsonb  WHERE j->'array' ? '5'::text;
 count 
-------
     0
(1 row)

-- However, a raw scalar is *contained* within the array
--Testcase 212:
EXPLAIN VERBOSE SELECT count(*) from testjsonb  WHERE j->'array' @> '5'::jsonb;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: ((testjsonb.j -> 'array'::text) @> '5'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 213:
SELECT count(*) from testjsonb  WHERE j->'array' @> '5'::jsonb;
 count 
-------
     1
(1 row)

--Testcase 214:
RESET enable_seqscan;
--Testcase 215:
EXPLAIN VERBOSE SELECT count(*) FROM (SELECT (jsonb_each(j)).key FROM testjsonb) AS wow;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3007.50..3007.51 rows=1 width=8)
   Output: count(*)
   ->  Result  (cost=0.00..1757.50 rows=100000 width=32)
         Output: ((jsonb_each(testjsonb.j))).key
         ->  ProjectSet  (cost=0.00..507.50 rows=100000 width=32)
               Output: jsonb_each(testjsonb.j)
               ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=32)
                     Output: testjsonb._id, testjsonb.j
                     Foreign Namespace: jsonb_regress.testjsonb
                     Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(10 rows)

--Testcase 216:
SELECT count(*) FROM (SELECT (jsonb_each(j)).key FROM testjsonb) AS wow;
 count 
-------
  4791
(1 row)

--Testcase 217:
EXPLAIN VERBOSE SELECT key, count(*) FROM (SELECT (jsonb_each(j)).key FROM testjsonb) AS wow GROUP BY key ORDER BY count DESC, key;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3267.14..3267.64 rows=200 width=40)
   Output: (((jsonb_each(testjsonb.j))).key), (count(*))
   Sort Key: (count(*)) DESC, (((jsonb_each(testjsonb.j))).key)
   ->  HashAggregate  (cost=3257.50..3259.50 rows=200 width=40)
         Output: (((jsonb_each(testjsonb.j))).key), count(*)
         Group Key: ((jsonb_each(testjsonb.j))).key
         ->  Result  (cost=0.00..1757.50 rows=100000 width=32)
               Output: ((jsonb_each(testjsonb.j))).key
               ->  ProjectSet  (cost=0.00..507.50 rows=100000 width=32)
                     Output: jsonb_each(testjsonb.j)
                     ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=32)
                           Output: testjsonb._id, testjsonb.j
                           Foreign Namespace: jsonb_regress.testjsonb
                           Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(14 rows)

--Testcase 218:
SELECT key, count(*) FROM (SELECT (jsonb_each(j)).key FROM testjsonb) AS wow GROUP BY key ORDER BY count DESC, key;
    key    | count 
-----------+-------
 line      |   884
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 wait      |   190
 org       |   189
 user      |   189
 coauthors |   188
 disabled  |   185
 indexed   |   184
 cleaned   |   180
 bad       |   179
 date      |   179
 world     |   176
 state     |   172
 subtitle  |   169
 auth      |   168
 abstract  |   161
 array     |     5
 age       |     2
 foo       |     2
 fool      |     1
(26 rows)

-- sort/hash
--Testcase 219:
EXPLAIN VERBOSE SELECT count(distinct j) FROM testjsonb;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(DISTINCT j)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=32)
         Output: _id, j
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 220:
SELECT count(distinct j) FROM testjsonb;
 count 
-------
   894
(1 row)

--Testcase 221:
SET enable_hashagg = off;
--Testcase 222:
EXPLAIN VERBOSE SELECT count(*) FROM (SELECT j FROM (SELECT * FROM testjsonb UNION ALL SELECT * FROM testjsonb) js GROUP BY j) js2;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=132.16..132.17 rows=1 width=8)
   Output: count(*)
   ->  Group  (cost=119.66..129.66 rows=200 width=32)
         Output: testjsonb.j
         Group Key: testjsonb.j
         ->  Sort  (cost=119.66..124.66 rows=2000 width=32)
               Output: testjsonb.j
               Sort Key: testjsonb.j
               ->  Append  (cost=0.00..10.00 rows=2000 width=32)
                     ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=32)
                           Output: testjsonb.j
                           Foreign Namespace: jsonb_regress.testjsonb
                           Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
                     ->  Foreign Scan on public.testjsonb testjsonb_1  (cost=0.00..0.00 rows=1000 width=32)
                           Output: testjsonb_1.j
                           Foreign Namespace: jsonb_regress.testjsonb
                           Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(17 rows)

--Testcase 223:
SELECT count(*) FROM (SELECT j FROM (SELECT * FROM testjsonb UNION ALL SELECT * FROM testjsonb) js GROUP BY j) js2;
 count 
-------
   894
(1 row)

--Testcase 224:
SET enable_hashagg = on;
--Testcase 225:
SET enable_sort = off;
--Testcase 226:
EXPLAIN VERBOSE SELECT count(*) FROM (SELECT j FROM (SELECT * FROM testjsonb UNION ALL SELECT * FROM testjsonb) js GROUP BY j) js2;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=19.50..19.51 rows=1 width=8)
   Output: count(*)
   ->  HashAggregate  (cost=15.00..17.00 rows=200 width=32)
         Output: testjsonb.j
         Group Key: testjsonb.j
         ->  Append  (cost=0.00..10.00 rows=2000 width=32)
               ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=32)
                     Output: testjsonb.j
                     Foreign Namespace: jsonb_regress.testjsonb
                     Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
               ->  Foreign Scan on public.testjsonb testjsonb_1  (cost=0.00..0.00 rows=1000 width=32)
                     Output: testjsonb_1.j
                     Foreign Namespace: jsonb_regress.testjsonb
                     Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(14 rows)

--Testcase 227:
SELECT count(*) FROM (SELECT j FROM (SELECT * FROM testjsonb UNION ALL SELECT * FROM testjsonb) js GROUP BY j) js2;
 count 
-------
   894
(1 row)

--Testcase 228:
EXPLAIN VERBOSE SELECT distinct * FROM (values (jsonb '{}' || ''::text),('{}')) v(j);
                             QUERY PLAN                             
--------------------------------------------------------------------
 HashAggregate  (cost=0.03..0.05 rows=2 width=32)
   Output: "*VALUES*".column1
   Group Key: "*VALUES*".column1
   ->  Values Scan on "*VALUES*"  (cost=0.00..0.03 rows=2 width=32)
         Output: "*VALUES*".column1
(5 rows)

--Testcase 229:
SELECT distinct * FROM (values (jsonb '{}' || ''::text),('{}')) v(j);
 j  
----
 {}
(1 row)

--Testcase 230:
SET enable_sort = on;
--Testcase 231:
RESET enable_hashagg;
--Testcase 232:
RESET enable_sort;
-- btree
--Testcase 233:
CREATE INDEX jidx ON testjsonb USING btree (j);
ERROR:  cannot create index on foreign table "testjsonb"
--Testcase 234:
SET enable_seqscan = off;
--Testcase 235:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j > '{"p":1}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j > '{"p": 1}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 236:
SELECT count(*) FROM testjsonb WHERE j > '{"p":1}';
 count 
-------
   884
(1 row)

--Testcase 237:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j = '{"pos":98, "line":371, "node":"CBA", "indexed":true}';
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j = '{"pos": 98, "line": 371, "node": "CBA", "indexed": true}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 238:
SELECT count(*) FROM testjsonb WHERE j = '{"pos":98, "line":371, "node":"CBA", "indexed":true}';
 count 
-------
     1
(1 row)

--gin path opclass
--Testcase 239:
DROP INDEX jidx;
ERROR:  index "jidx" does not exist
--Testcase 240:
CREATE INDEX jidx ON testjsonb USING gin (j jsonb_path_ops);
ERROR:  cannot create index on foreign table "testjsonb"
--Testcase 241:
SET enable_seqscan = off;
--Testcase 242:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": null}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 243:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
 count 
-------
     1
(1 row)

--Testcase 244:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": "CC"}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 245:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
 count 
-------
    15
(1 row)

--Testcase 246:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"wait": "CC", "public": true}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 247:
SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
 count 
-------
     2
(1 row)

--Testcase 248:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"age": 25}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 249:
SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
 count 
-------
     2
(1 row)

--Testcase 250:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{"age": 25.0}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 251:
SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
 count 
-------
     2
(1 row)

-- exercise GIN_SEARCH_MODE_ALL
--Testcase 252:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @> '{}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @> '{}'::jsonb)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 253:
SELECT count(*) FROM testjsonb WHERE j @> '{}';
 count 
-------
  1012
(1 row)

--Testcase 254:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."wait" == null)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 255:
SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null';
 count 
-------
     1
(1 row)

--Testcase 256:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.wait == null))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($?(@."wait" == null))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 257:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.wait == null))';
 count 
-------
     1
(1 row)

--Testcase 258:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.wait ? (@ == null))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."wait"?(@ == null))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 259:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.wait ? (@ == null))';
 count 
-------
     1
(1 row)

--Testcase 260:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '"CC" == $.wait';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '("CC" == $."wait")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 261:
SELECT count(*) FROM testjsonb WHERE j @@ '"CC" == $.wait';
 count 
-------
    15
(1 row)

--Testcase 262:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == "CC" && true == $.public';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."wait" == "CC" && true == $."public")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 263:
SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == "CC" && true == $.public';
 count 
-------
     2
(1 row)

--Testcase 264:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."age" == 25)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 265:
SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25';
 count 
-------
     2
(1 row)

--Testcase 266:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."age" == 25.0)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 267:
SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0';
 count 
-------
     2
(1 row)

--Testcase 268:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == "foo"';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."array"[*] == "foo")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 269:
SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == "foo"';
 count 
-------
     3
(1 row)

--Testcase 270:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == "bar"';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ '($."array"[*] == "bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 271:
SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == "bar"';
 count 
-------
     3
(1 row)

--Testcase 272:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.array[*] == "bar"))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($?(@."array"[*] == "bar"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 273:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.array[*] == "bar"))';
 count 
-------
     3
(1 row)

--Testcase 274:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array ? (@[*] == "bar"))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."array"?(@[*] == "bar"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 275:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array ? (@[*] == "bar"))';
 count 
-------
     3
(1 row)

--Testcase 276:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array[*] ? (@ == "bar"))';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($."array"[*]?(@ == "bar"))'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 277:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array[*] ? (@ == "bar"))';
 count 
-------
     3
(1 row)

--Testcase 278:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @@ 'exists ($)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 279:
SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)';
 count 
-------
  1012
(1 row)

--Testcase 280:
EXPLAIN (COSTS OFF)
SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)';
                       QUERY PLAN                        
---------------------------------------------------------
 Aggregate
   ->  Foreign Scan on testjsonb
         Filter: (j @? '$."wait"?(@ == null)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
(4 rows)

--Testcase 281:
SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)';
 count 
-------
     1
(1 row)

--Testcase 282:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? ("CC" == @)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."wait"?("CC" == @)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 283:
SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? ("CC" == @)';
 count 
-------
    15
(1 row)

--Testcase 284:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == "CC" && true == @.public)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$?(@."wait" == "CC" && true == @."public")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 285:
SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == "CC" && true == @.public)';
 count 
-------
     2
(1 row)

--Testcase 286:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."age"?(@ == 25)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 287:
SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)';
 count 
-------
     2
(1 row)

--Testcase 288:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$?(@."age" == 25.0)'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 289:
SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)';
 count 
-------
     2
(1 row)

--Testcase 290:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.array[*] == "bar")';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$?(@."array"[*] == "bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 291:
SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.array[*] == "bar")';
 count 
-------
     3
(1 row)

--Testcase 292:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.array ? (@[*] == "bar")';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."array"?(@[*] == "bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 293:
SELECT count(*) FROM testjsonb WHERE j @? '$.array ? (@[*] == "bar")';
 count 
-------
     3
(1 row)

--Testcase 294:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.array[*] ? (@ == "bar")';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."array"[*]?(@ == "bar")'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 295:
SELECT count(*) FROM testjsonb WHERE j @? '$.array[*] ? (@ == "bar")';
 count 
-------
     3
(1 row)

--Testcase 296:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 297:
SELECT count(*) FROM testjsonb WHERE j @? '$';
 count 
-------
  1012
(1 row)

--Testcase 298:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.public';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."public"'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 299:
SELECT count(*) FROM testjsonb WHERE j @? '$.public';
 count 
-------
   194
(1 row)

--Testcase 300:
EXPLAIN VERBOSE SELECT count(*) FROM testjsonb WHERE j @? '$.bar';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=8)
   Output: count(*)
   ->  Foreign Scan on public.testjsonb  (cost=0.00..0.00 rows=1000 width=0)
         Output: _id, j
         Filter: (testjsonb.j @? '$."bar"'::jsonpath)
         Foreign Namespace: jsonb_regress.testjsonb
         Query document: { "pipeline" : [ { "$project" : { "j" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 301:
SELECT count(*) FROM testjsonb WHERE j @? '$.bar';
 count 
-------
     0
(1 row)

--Testcase 302:
RESET enable_seqscan;
--Testcase 303:
DROP INDEX jidx;
ERROR:  index "jidx" does not exist
--Testcase 304:
CREATE FOREIGN TABLE foo (_id name, serial_num int, name text, type text)
 SERVER mongo_server OPTIONS (database 'jsonb_regress', collection 'foo');
--Testcase 305:
EXPLAIN VERBOSE SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
FROM foo;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=5.00..5.02 rows=1 width=32)
   Output: json_build_object('turbines', json_object_agg(serial_num, json_build_object('name', name, 'type', type)))
   ->  Foreign Scan on public.foo  (cost=0.00..0.00 rows=1000 width=68)
         Output: _id, serial_num, name, type
         Foreign Namespace: jsonb_regress.foo
         Query document: { "pipeline" : [ { "$project" : { "serial_num" : { "$numberInt" : "1" }, "name" : { "$numberInt" : "1" }, "type" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 306:
SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
FROM foo;
                                                                            json_build_object                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"turbines" : { "847001" : {"name" : "t15", "type" : "GE1043"}, "847002" : {"name" : "t16", "type" : "GE1043"}, "847003" : {"name" : "sub-alpha", "type" : "GESS90"} }}
(1 row)

--Testcase 307:
EXPLAIN VERBOSE SELECT json_object_agg(name, type) FROM foo;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=32)
   Output: json_object_agg(name, type)
   ->  Foreign Scan on public.foo  (cost=0.00..0.00 rows=1000 width=64)
         Output: _id, serial_num, name, type
         Foreign Namespace: jsonb_regress.foo
         Query document: { "pipeline" : [ { "$project" : { "name" : { "$numberInt" : "1" }, "type" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 308:
SELECT json_object_agg(name, type) FROM foo;
                        json_object_agg                         
----------------------------------------------------------------
 { "t15" : "GE1043", "t16" : "GE1043", "sub-alpha" : "GESS90" }
(1 row)

--Testcase 309:
INSERT INTO foo VALUES ('60f0fe64c6d173cad75bf387',999999, NULL, 'bar');
--Testcase 310:
EXPLAIN VERBOSE SELECT json_object_agg(name, type) FROM foo;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=32)
   Output: json_object_agg(name, type)
   ->  Foreign Scan on public.foo  (cost=0.00..0.00 rows=1000 width=64)
         Output: _id, serial_num, name, type
         Foreign Namespace: jsonb_regress.foo
         Query document: { "pipeline" : [ { "$project" : { "name" : { "$numberInt" : "1" }, "type" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 311:
SELECT json_object_agg(name, type) FROM foo;
ERROR:  field name must not be null
-- populate_record
--Testcase 312:
create type jpop as (a text, b int, c timestamp);
ERROR:  type "jpop" already exists
--Testcase 313:
CREATE DOMAIN js_int_array_1d  AS int[]   CHECK(array_length(VALUE, 1) = 3);
--Testcase 314:
CREATE DOMAIN js_int_array_2d  AS int[][] CHECK(array_length(VALUE, 2) = 3);
--Testcase 315:
CREATE TYPE jsrec AS (
	i int,
	ia _int4,
	ia1 int[],
	ia2 int[][],
	ia3 int[][][],
	ia1d js_int_array_1d,
	ia2d js_int_array_2d,
	t text,
	ta text[],
	c char(10),
	ca char(10)[],
	ts timestamp,
	js json,
	jsb jsonb,
	jsa json[],
	rec jpop,
	reca jpop[]
);
-- test type info caching in json_populate_record()
--Testcase 316:
CREATE FOREIGN TABLE jspoptest (_id name, js jsonb)
 SERVER mongo_server OPTIONS (database 'jsonb_regress', collection 'jspoptest');
--Testcase 317:
EXPLAIN VERBOSE SELECT (json_populate_record(NULL::jsrec, js)).* FROM jspoptest;
ERROR:  function json_populate_record(jsrec, jsonb) does not exist
LINE 1: EXPLAIN VERBOSE SELECT (json_populate_record(NULL::jsrec, js...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--Testcase 318:
SELECT (json_populate_record(NULL::jsrec, js)).* FROM jspoptest;
ERROR:  function json_populate_record(jsrec, jsonb) does not exist
LINE 1: SELECT (json_populate_record(NULL::jsrec, js)).* FROM jspopt...
                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--Testcase 319:
DROP TYPE jsrec;
--Testcase 320:
DROP TYPE jsrec_i_not_null;
ERROR:  type "jsrec_i_not_null" does not exist
--Testcase 321:
DROP DOMAIN js_int_array_1d;
--Testcase 322:
DROP DOMAIN js_int_array_2d;
--Testcase 323:
CREATE FOREIGN TABLE nestjsonb (_id name, j jsonb)
 SERVER mongo_server OPTIONS (database 'jsonb_regress', collection 'nestjsonb');
--Testcase 324:
create index on nestjsonb using gin(j jsonb_path_ops);
ERROR:  cannot create index on foreign table "nestjsonb"
--Testcase 325:
set enable_seqscan = on;
--Testcase 326:
set enable_bitmapscan = off;
--Testcase 327:
select * from nestjsonb where j @> '{"a":[[{"x":2}]]}'::jsonb;
           _id            |                         j                         
--------------------------+---------------------------------------------------
 60f10025c6d173cad75bf388 | {"a": [["b", {"x": 1}], ["b", {"x": 2}]], "c": 3}
(1 row)

--Testcase 328:
select * from nestjsonb where j @> '{"c":3}';
           _id            |                         j                         
--------------------------+---------------------------------------------------
 60f10025c6d173cad75bf388 | {"a": [["b", {"x": 1}], ["b", {"x": 2}]], "c": 3}
(1 row)

--Testcase 329:
select * from nestjsonb where j @> '[[14]]';
           _id            |        j        
--------------------------+-----------------
 60f10025c6d173cad75bf389 | [[14, 2, 3]]
 60f10025c6d173cad75bf38a | [1, [14, 2, 3]]
(2 rows)

--Testcase 330:
set enable_seqscan = off;
--Testcase 331:
set enable_bitmapscan = on;
--Testcase 332:
select * from nestjsonb where j @> '{"a":[[{"x":2}]]}'::jsonb;
           _id            |                         j                         
--------------------------+---------------------------------------------------
 60f10025c6d173cad75bf388 | {"a": [["b", {"x": 1}], ["b", {"x": 2}]], "c": 3}
(1 row)

--Testcase 333:
select * from nestjsonb where j @> '{"c":3}';
           _id            |                         j                         
--------------------------+---------------------------------------------------
 60f10025c6d173cad75bf388 | {"a": [["b", {"x": 1}], ["b", {"x": 2}]], "c": 3}
(1 row)

--Testcase 334:
select * from nestjsonb where j @> '[[14]]';
           _id            |        j        
--------------------------+-----------------
 60f10025c6d173cad75bf389 | [[14, 2, 3]]
 60f10025c6d173cad75bf38a | [1, [14, 2, 3]]
(2 rows)

--Testcase 335:
reset enable_seqscan;
--Testcase 336:
reset enable_bitmapscan;
--Testcase 337:
DROP USER MAPPING FOR public SERVER mongo_server;
--Testcase 338:
DROP EXTENSION mongo_fdw CASCADE;
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to server mongo_server
drop cascades to foreign table rows
drop cascades to foreign table test_jsonb
drop cascades to foreign table testjsonb
drop cascades to foreign table foo
drop cascades to foreign table jspoptest
drop cascades to foreign table nestjsonb
