-- Before running this file User must create database mongo_fdw_regress and
-- mongo_fdw_regress1 databases on MongoDB with all permission for
-- MONGO_USER_NAME user with MONGO_PASS password and ran mongodb_init.sh file
-- to load collections.
\set ECHO none
\c contrib_regression
CREATE EXTENSION IF NOT EXISTS mongo_fdw;
NOTICE:  extension "mongo_fdw" already exists, skipping
CREATE SERVER mongo_server FOREIGN DATA WRAPPER mongo_fdw
  OPTIONS (address :MONGO_HOST, port :MONGO_PORT);
CREATE USER MAPPING FOR public SERVER mongo_server;
-- Port outside ushort range. Error.
CREATE SERVER mongo_server1 FOREIGN DATA WRAPPER mongo_fdw
  OPTIONS (address :MONGO_HOST, port '65537');
ERROR:  port value "65537" is out of range for type unsigned short
ALTER SERVER mongo_server OPTIONS (SET port '65537');
ERROR:  port value "65537" is out of range for type unsigned short
-- Validate extension, server and mapping details
CREATE OR REPLACE FUNCTION show_details(host TEXT, port TEXT, uid TEXT, pwd TEXT) RETURNS int AS $$
DECLARE
  ext TEXT;
  srv TEXT;
  sopts TEXT;
  uopts TEXT;
BEGIN
  SELECT e.fdwname, srvname, array_to_string(s.srvoptions, ','), array_to_string(u.umoptions, ',')
    INTO ext, srv, sopts, uopts
    FROM pg_foreign_data_wrapper e LEFT JOIN pg_foreign_server s ON e.oid = s.srvfdw LEFT JOIN pg_user_mapping u ON s.oid = u.umserver
    WHERE e.fdwname = 'mongo_fdw'
    ORDER BY 1, 2, 3, 4;

  raise notice 'Extension            : %', ext;
  raise notice 'Server               : %', srv;

  IF strpos(sopts, host) <> 0 AND strpos(sopts, port) <> 0 THEN
    raise notice 'Server_Options       : matched';
  END IF;

  IF strpos(uopts, uid) <> 0 AND strpos(uopts, pwd) <> 0 THEN
    raise notice 'User_Mapping_Options : matched';
  END IF;

  return 1;
END;
$$ language plpgsql;
SELECT show_details(:MONGO_HOST, :MONGO_PORT, :MONGO_USER_NAME, :MONGO_PASS);
NOTICE:  Extension            : mongo_fdw
NOTICE:  Server               : mongo_server
NOTICE:  Server_Options       : matched
 show_details 
--------------
            1
(1 row)

-- Create foreign tables and perform basic SQL operations
CREATE FOREIGN TABLE f_mongo_test (_id name, a int, b varchar)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'mongo_test');
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
 a |           b           
---+-----------------------
 0 | mongo_test collection
(1 row)

INSERT INTO f_mongo_test VALUES ('0', 2, 'mongo_test insert');
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
 a |           b           
---+-----------------------
 0 | mongo_test collection
 2 | mongo_test insert
(2 rows)

UPDATE f_mongo_test SET b = 'mongo_test update' WHERE a = 2;
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
 a |           b           
---+-----------------------
 0 | mongo_test collection
 2 | mongo_test update
(2 rows)

DELETE FROM f_mongo_test WHERE a = 2;
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
 a |           b           
---+-----------------------
 0 | mongo_test collection
(1 row)

-- Test SSL option when MongoDB server running in non-SSL mode.
-- Set non-boolean value, should throw an error.
ALTER SERVER mongo_server OPTIONS (ssl '1');
ERROR:  invalid option "ssl"
HINT:  Valid options in this context are: address, port, use_remote_estimate.
ALTER SERVER mongo_server OPTIONS (ssl 'x');
ERROR:  invalid option "ssl"
HINT:  Valid options in this context are: address, port, use_remote_estimate.
-- Check for default value i.e. false
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
 a |           b           
---+-----------------------
 0 | mongo_test collection
(1 row)

-- Set 'true'.
ALTER SERVER mongo_server OPTIONS (ssl 'true');
ERROR:  invalid option "ssl"
HINT:  Valid options in this context are: address, port, use_remote_estimate.
-- Results into an error as MongoDB server is running in non-SSL mode.
\set VERBOSITY terse
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
 a |           b           
---+-----------------------
 0 | mongo_test collection
(1 row)

\set VERBOSITY default
-- Switch back to 'false'.
ALTER SERVER mongo_server OPTIONS (SET ssl 'false');
ERROR:  option "ssl" not found
-- Should now be successful.
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
 a |           b           
---+-----------------------
 0 | mongo_test collection
(1 row)

-- Alter server to add authentication_database option
-- authentication_database options is not supported with legacy driver
-- so below queries will fail when compiled with legacy driver.
ALTER SERVER mongo_server OPTIONS (ADD authentication_database 'NOT_EXIST_DB');
ERROR:  invalid option "authentication_database"
HINT:  Valid options in this context are: address, port, use_remote_estimate.
ALTER USER MAPPING FOR public SERVER mongo_server
  OPTIONS (ADD username :MONGO_USER_NAME, password :MONGO_PASS);
-- Below query will fail with authentication error as user cannot be
-- authenticated against given authentication_database.
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
ERROR:  could not connect to localhost:27017
HINT:  Mongo driver connection error: 
-- Now changed to valid authentication_database so select query should work.
ALTER SERVER mongo_server
  OPTIONS (SET authentication_database 'mongo_fdw_regress');
ERROR:  option "authentication_database" not found
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
ERROR:  could not connect to localhost:27017
HINT:  Mongo driver connection error: 
ALTER SERVER mongo_server
  OPTIONS (DROP authentication_database);
ERROR:  option "authentication_database" not found
ALTER USER MAPPING FOR public SERVER mongo_server
  OPTIONS (DROP username, DROP password);
-- FDW-464: Support use_remote_estimate option at server level.
-- Check only boolean values are accepted.
ALTER SERVER mongo_server OPTIONS (ADD use_remote_estimate 'abc11');
ERROR:  use_remote_estimate requires a Boolean value
-- Check default behaviour. Should be 'false'.
EXPLAIN(COSTS OFF)
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
                       QUERY PLAN                        
---------------------------------------------------------
 Sort
   Sort Key: a, b
   ->  Foreign Scan on f_mongo_test
         Foreign Namespace: mongo_fdw_regress.mongo_test
(4 rows)

-- Enable remote estimation.
ALTER SERVER mongo_server OPTIONS (ADD use_remote_estimate 'true');
EXPLAIN(COSTS OFF)
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
                       QUERY PLAN                        
---------------------------------------------------------
 Sort
   Sort Key: a, b
   ->  Foreign Scan on f_mongo_test
         Foreign Namespace: mongo_fdw_regress.mongo_test
(4 rows)

-- Disable remote estimation.
ALTER SERVER mongo_server OPTIONS (SET use_remote_estimate 'false');
EXPLAIN(COSTS OFF)
SELECT a, b FROM f_mongo_test ORDER BY 1, 2;
                       QUERY PLAN                        
---------------------------------------------------------
 Sort
   Sort Key: a, b
   ->  Foreign Scan on f_mongo_test
         Foreign Namespace: mongo_fdw_regress.mongo_test
(4 rows)

-- Cleanup
DROP FOREIGN TABLE f_mongo_test;
ERROR:  foreign table "f_mongo_test" does not exist
DROP USER MAPPING FOR public SERVER mongo_server;
ERROR:  server "mongo_server" does not exist
DROP SERVER mongo_server;
ERROR:  server "mongo_server" does not exist
DROP EXTENSION mongo_fdw;
