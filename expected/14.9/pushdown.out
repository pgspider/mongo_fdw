-- Before running this file User must create database mongo_fdw_regress and
-- mongo_fdw_regress1 databases on MongoDB with all permission for
-- MONGO_USER_NAME user with MONGO_PASS password and ran mongodb_init.sh file
-- to load collections.
\set ECHO none
\c contrib_regression
--Testcase 1:
CREATE EXTENSION IF NOT EXISTS mongo_fdw;
--Testcase 2:
CREATE SERVER mongo_server FOREIGN DATA WRAPPER mongo_fdw
  OPTIONS (address :MONGO_HOST, port :MONGO_PORT);
--Testcase 3:
CREATE USER MAPPING FOR public SERVER mongo_server;
-- Create foreign tables
--Testcase 4:
CREATE FOREIGN TABLE f_mongo_test (_id name, a int, b varchar)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'mongo_test');
--Testcase 5:
CREATE FOREIGN TABLE f_test_tbl1 (_id name, c1 INTEGER, c2 VARCHAR(10), c3 CHAR(9), c4 INTEGER, c5 pg_catalog.Date, c6 DECIMAL, c7 INTEGER, c8 INTEGER)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl1');
--Testcase 6:
CREATE FOREIGN TABLE f_test_tbl2 (_id name, c1 INTEGER, c2 VARCHAR(14), c3 VARCHAR(13))
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl2');
--Testcase 7:
CREATE FOREIGN TABLE f_test_tbl3 (_id name, name TEXT, marks FLOAT ARRAY, pass BOOLEAN)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl3');
-- Inserts some values in mongo_test collection.
--Testcase 8:
INSERT INTO f_mongo_test VALUES ('0', 1, 'One');
--Testcase 9:
INSERT INTO f_mongo_test VALUES ('0', 2, 'Two');
--Testcase 10:
INSERT INTO f_mongo_test VALUES ('0', 3, 'Three');
--Testcase 11:
SET datestyle TO ISO;
-- Sample data
--Testcase 12:
SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM f_test_tbl1 ORDER BY c1;
  c1  |  c2   |    c3     |  c4  |     c5     |   c6    |  c7  | c8 
------+-------+-----------+------+------------+---------+------+----
  100 | EMP1  | ADMIN     | 1300 | 1980-12-17 |   800.3 |    0 | 20
  200 | EMP2  | SALESMAN  |  600 | 1981-02-20 |    1600 |  300 | 30
  300 | EMP3  | SALESMAN  |  600 | 1981-02-22 |    1250 |  500 | 30
  400 | EMP4  | MANAGER   |  900 | 1981-04-02 |    2975 |    0 | 20
  500 | EMP5  | SALESMAN  |  600 | 1981-09-28 | 1250.23 | 1400 | 30
  600 | EMP6  | MANAGER   |  900 | 1981-05-01 |    2850 |    0 | 30
  700 | EMP7  | MANAGER   |  900 | 1981-06-09 | 2450.34 |    0 | 10
  800 | EMP8  | FINANCE   |  400 | 1987-04-19 |    3000 |    0 | 20
  900 | EMP9  | HEAD      |      | 1981-11-17 |    5000 |    0 | 10
 1000 | EMP10 | SALESMAN  |  600 | 1980-09-08 |    1500 |    0 | 30
 1100 | EMP11 | ADMIN     |  800 | 1987-05-23 |    1100 |    0 | 20
 1200 | EMP12 | ADMIN     |  600 | 1981-12-03 |     950 |    0 | 30
 1300 | EMP13 | FINANCE   |  400 | 1981-12-03 |    3000 |    0 | 20
 1400 | EMP14 | ADMIN     |  700 | 1982-01-23 |    1300 |    0 | 10
(14 rows)

-- WHERE clause pushdown
--Testcase 13:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6 AS "salary", c8 FROM f_test_tbl1 e
  WHERE c6 IN (1600, 2450)
  ORDER BY c1;
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$match" : { "c6" : { "$in" : [ { "$numberDouble" : "1600.0" }, { "$numberDouble" : "2450.0" } ] } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" }, "c8" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 14:
SELECT c1, c2, c6 AS "salary", c8 FROM f_test_tbl1 e
  WHERE c6 IN (1600, 2450)
  ORDER BY c1;
 c1  |  c2  | salary | c8 
-----+------+--------+----
 200 | EMP2 |   1600 | 30
(1 row)

--Testcase 15:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6 FROM f_test_tbl1 e
  WHERE c6 > 3000
  ORDER BY c1;
                                                                                                             QUERY PLAN                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$match" : { "c6" : { "$gt" : { "$numberDouble" : "3000.0" } } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 16:
SELECT c1, c2, c6 FROM f_test_tbl1 e
  WHERE c6 > 3000
  ORDER BY c1;
 c1  |  c2  |  c6  
-----+------+------
 900 | EMP9 | 5000
(1 row)

--Testcase 17:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 = 1500
  ORDER BY c1;
                                                                                                                             QUERY PLAN                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$match" : { "c6" : { "$eq" : { "$numberDouble" : "1500.0" } } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" }, "c8" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 18:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 = 1500
  ORDER BY c1;
  c1  |  c2   |  c6  | c8 
------+-------+------+----
 1000 | EMP10 | 1500 | 30
(1 row)

--Testcase 19:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 BETWEEN 1000 AND 4000
  ORDER BY c1;
                                                                                                                                                                  QUERY PLAN                                                                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$match" : { "$and" : [ { "c6" : { "$gte" : { "$numberDouble" : "1000.0" } } }, { "c6" : { "$lte" : { "$numberDouble" : "4000.0" } } } ] } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" }, "c8" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 20:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 BETWEEN 1000 AND 4000
  ORDER BY c1;
  c1  |  c2   |   c6    | c8 
------+-------+---------+----
  200 | EMP2  |    1600 | 30
  300 | EMP3  |    1250 | 30
  400 | EMP4  |    2975 | 20
  500 | EMP5  | 1250.23 | 30
  600 | EMP6  |    2850 | 30
  700 | EMP7  | 2450.34 | 10
  800 | EMP8  |    3000 | 20
 1000 | EMP10 |    1500 | 30
 1100 | EMP11 |    1100 | 20
 1300 | EMP13 |    3000 | 20
 1400 | EMP14 |    1300 | 10
(11 rows)

--Testcase 21:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c4, c6, c8 FROM f_test_tbl1 e
  WHERE c4 IS NOT NULL
  ORDER BY c1;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c4, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c4, c6, c8
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$match" : { "c4" : { "$ne" : null } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c4" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" }, "c8" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 22:
SELECT c1, c2, c4, c6, c8 FROM f_test_tbl1 e
  WHERE c4 IS NOT NULL
  ORDER BY c1;
  c1  |  c2   |  c4  |   c6    | c8 
------+-------+------+---------+----
  100 | EMP1  | 1300 |   800.3 | 20
  200 | EMP2  |  600 |    1600 | 30
  300 | EMP3  |  600 |    1250 | 30
  400 | EMP4  |  900 |    2975 | 20
  500 | EMP5  |  600 | 1250.23 | 30
  600 | EMP6  |  900 |    2850 | 30
  700 | EMP7  |  900 | 2450.34 | 10
  800 | EMP8  |  400 |    3000 | 20
 1000 | EMP10 |  600 |    1500 | 30
 1100 | EMP11 |  800 |    1100 | 20
 1200 | EMP12 |  600 |     950 | 30
 1300 | EMP13 |  400 |    3000 | 20
 1400 | EMP14 |  700 |    1300 | 10
(13 rows)

--Testcase 23:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c5 FROM f_test_tbl1 e
  WHERE c5 <= '1980-12-17'
  ORDER BY c1;
                                                                                                                       QUERY PLAN                                                                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c5
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c5
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$match" : { "c5" : { "$lte" : { "$date" : { "$numberLong" : "345859200000" } } } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c5" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 24:
SELECT c1, c2, c5 FROM f_test_tbl1 e
  WHERE c5 <= '1980-12-17'
  ORDER BY c1;
  c1  |  c2   |     c5     
------+-------+------------
  100 | EMP1  | 1980-12-17
 1000 | EMP10 | 1980-09-08
(2 rows)

--Testcase 25:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;
                                                                                                                           QUERY PLAN                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$match" : { "c2" : { "$in" : [ "EMP6", "EMP12", "EMP5" ] } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" }, "c8" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 26:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;
  c1  |  c2   |   c6    | c8 
------+-------+---------+----
  500 | EMP5  | 1250.23 | 30
  600 | EMP6  |    2850 | 30
 1200 | EMP12 |     950 | 30
(3 rows)

--Testcase 27:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'SALESMAN'
  ORDER BY c1;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Filter: (e.c3 ~~ 'SALESMAN'::text)
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c3" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" }, "c8" : { "$numberInt" : "1" } } } ] }
(8 rows)

--Testcase 28:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'SALESMAN'
  ORDER BY c1;
 c1 | c2 | c6 | c8 
----+----+----+----
(0 rows)

--Testcase 29:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'MANA%'
  ORDER BY c1;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c6, c8
   Sort Key: e.c1
   ->  Foreign Scan on public.f_test_tbl1 e
         Output: c1, c2, c6, c8
         Filter: (e.c3 ~~ 'MANA%'::text)
         Foreign Namespace: mongo_fdw_regress.test_tbl1
         Query document: { "pipeline" : [ { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c3" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" }, "c8" : { "$numberInt" : "1" } } } ] }
(8 rows)

--Testcase 30:
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'MANA%'
  ORDER BY c1;
 c1  |  c2  |   c6    | c8 
-----+------+---------+----
 400 | EMP4 |    2975 | 20
 600 | EMP6 |    2850 | 30
 700 | EMP7 | 2450.34 | 10
(3 rows)

--Testcase 31:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT a FROM f_mongo_test
  WHERE a%2 = 1
  ORDER BY a;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: a
   Sort Key: f_mongo_test.a
   ->  Foreign Scan on public.f_mongo_test
         Output: a
         Filter: ((f_mongo_test.a % 2) = 1)
         Foreign Namespace: mongo_fdw_regress.mongo_test
         Query document: { "pipeline" : [ { "$project" : { "a" : { "$numberInt" : "1" } } } ] }
(8 rows)

--Testcase 32:
SELECT a FROM f_mongo_test
  WHERE a%2 = 1
  ORDER BY a;
 a 
---
 1
 3
(2 rows)

--Testcase 33:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT a, b FROM f_mongo_test
  WHERE a >= 1 AND b LIKE '%O%'
  ORDER BY a;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: a, b
   Sort Key: f_mongo_test.a
   ->  Foreign Scan on public.f_mongo_test
         Output: a, b
         Filter: ((f_mongo_test.b)::text ~~ '%O%'::text)
         Foreign Namespace: mongo_fdw_regress.mongo_test
         Query document: { "pipeline" : [ { "$match" : { "a" : { "$gte" : { "$numberInt" : "1" } } } }, { "$project" : { "a" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "1" } } } ] }
(8 rows)

--Testcase 34:
SELECT a, b FROM f_mongo_test
  WHERE a >= 1 AND b LIKE '%O%'
  ORDER BY a;
 a |  b  
---+-----
 1 | One
(1 row)

--Testcase 35:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c5 FROM f_test_tbl1 e
  WHERE c5 <= '1980-12-17' AND c2 IN ('EMP1', 'EMP5', 'EMP10') AND c1 = 100
  ORDER BY c1;
                                                                                                                                                                               QUERY PLAN                                                                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1 e
   Output: c1, c2, c5
   Foreign Namespace: mongo_fdw_regress.test_tbl1
   Query document: { "pipeline" : [ { "$match" : { "$and" : [ { "c5" : { "$lte" : { "$date" : { "$numberLong" : "345859200000" } } } }, { "c1" : { "$eq" : { "$numberInt" : "100" } } }, { "c2" : { "$in" : [ "EMP1", "EMP5", "EMP10" ] } } ] } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" }, "c5" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 36:
SELECT c1, c2, c5 FROM f_test_tbl1 e
  WHERE c5 <= '1980-12-17' AND c2 IN ('EMP1', 'EMP5', 'EMP10') AND c1 = 100
  ORDER BY c1;
 c1  |  c2  |     c5     
-----+------+------------
 100 | EMP1 | 1980-12-17
(1 row)

--Testcase 37:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2 FROM f_test_tbl1
  WHERE c2 = 'EMP10';
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1
   Output: c1, c2
   Foreign Namespace: mongo_fdw_regress.test_tbl1
   Query document: { "pipeline" : [ { "$match" : { "c2" : { "$eq" : "EMP10" } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 38:
SELECT c1, c2 FROM f_test_tbl1
  WHERE c2 = 'EMP10';
  c1  |  c2   
------+-------
 1000 | EMP10
(1 row)

--Testcase 39:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2 FROM f_test_tbl1
  WHERE c2 < 'EMP10';
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1
   Output: c1, c2
   Foreign Namespace: mongo_fdw_regress.test_tbl1
   Query document: { "pipeline" : [ { "$match" : { "c2" : { "$lt" : "EMP10" } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 40:
SELECT c1, c2 FROM f_test_tbl1
  WHERE c2 < 'EMP10';
 c1  |  c2  
-----+------
 100 | EMP1
(1 row)

-- Should not push down if two columns of same table is
-- involved in single WHERE clause operator expression.
--Testcase 41:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c6 FROM f_test_tbl1
  WHERE c1 = c6 AND c1 = 1100
  ORDER BY c1;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1
   Output: c1, c6
   Filter: ((f_test_tbl1.c1)::numeric = f_test_tbl1.c6)
   Foreign Namespace: mongo_fdw_regress.test_tbl1
   Query document: { "pipeline" : [ { "$match" : { "c1" : { "$eq" : { "$numberInt" : "1100" } } } }, { "$project" : { "c1" : { "$numberInt" : "1" }, "c6" : { "$numberInt" : "1" } } } ] }
(5 rows)

--Testcase 42:
SELECT c1, c6 FROM f_test_tbl1
  WHERE c1 = c6 AND c1 = 1100
  ORDER BY c1;
  c1  |  c6  
------+------
 1100 | 1100
(1 row)

-- Nested operator expression in WHERE clause. Shouldn't push down.
--Testcase 43:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2 FROM f_test_tbl1
  WHERE (c1 > 1000) > FALSE;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1
   Output: c1, c2
   Filter: ((f_test_tbl1.c1 > 1000) > false)
   Foreign Namespace: mongo_fdw_regress.test_tbl1
   Query document: { "pipeline" : [ { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" } } } ] }
(5 rows)

--Testcase 44:
SELECT c1, c2 FROM f_test_tbl1
  WHERE (c1 > 1000) > FALSE;
  c1  |  c2   
------+-------
 1100 | EMP11
 1200 | EMP12
 1300 | EMP13
 1400 | EMP14
(4 rows)

--Testcase 45:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2 FROM f_test_tbl1
  WHERE (c1 > 1000) > 0::BOOLEAN;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.f_test_tbl1
   Output: c1, c2
   Filter: ((f_test_tbl1.c1 > 1000) > false)
   Foreign Namespace: mongo_fdw_regress.test_tbl1
   Query document: { "pipeline" : [ { "$project" : { "c1" : { "$numberInt" : "1" }, "c2" : { "$numberInt" : "1" } } } ] }
(5 rows)

--Testcase 46:
SELECT c1, c2 FROM f_test_tbl1
  WHERE (c1 > 1000) > 0::BOOLEAN;
  c1  |  c2   
------+-------
 1100 | EMP11
 1200 | EMP12
 1300 | EMP13
 1400 | EMP14
(4 rows)

-- Shouldn't push down operators where the constant is an array.
--Testcase 47:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT name, marks FROM f_test_tbl3
  WHERE marks = ARRAY[23::FLOAT, 24::FLOAT]
  ORDER BY name;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: name, marks
   Sort Key: f_test_tbl3.name
   ->  Foreign Scan on public.f_test_tbl3
         Output: name, marks
         Filter: (f_test_tbl3.marks = '{23,24}'::double precision[])
         Foreign Namespace: mongo_fdw_regress.test_tbl3
         Query document: { "pipeline" : [ { "$project" : { "name" : { "$numberInt" : "1" }, "marks" : { "$numberInt" : "1" } } } ] }
(8 rows)

--Testcase 48:
SELECT name, marks FROM f_test_tbl3
  WHERE marks = ARRAY[23::FLOAT, 24::FLOAT]
  ORDER BY name;
 name |  marks  
------+---------
 dvd  | {23,24}
(1 row)

-- Pushdown in prepared statement.
--Testcase 49:
PREPARE pre_stmt_f_mongo_test(int) AS
  SELECT b FROM f_mongo_test WHERE a = $1 ORDER BY b;
--Testcase 50:
EXPLAIN (VERBOSE, COSTS FALSE)
EXECUTE pre_stmt_f_mongo_test(1);
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: b
   Sort Key: f_mongo_test.b
   ->  Foreign Scan on public.f_mongo_test
         Output: b
         Foreign Namespace: mongo_fdw_regress.mongo_test
         Query document: { "pipeline" : [ { "$match" : { "a" : { "$eq" : { "$numberInt" : "1" } } } }, { "$project" : { "b" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 51:
EXECUTE pre_stmt_f_mongo_test(1);
  b  
-----
 One
(1 row)

--Testcase 52:
EXPLAIN (VERBOSE, COSTS FALSE)
EXECUTE pre_stmt_f_mongo_test(2);
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: b
   Sort Key: f_mongo_test.b
   ->  Foreign Scan on public.f_mongo_test
         Output: b
         Foreign Namespace: mongo_fdw_regress.mongo_test
         Query document: { "pipeline" : [ { "$match" : { "a" : { "$eq" : { "$numberInt" : "2" } } } }, { "$project" : { "b" : { "$numberInt" : "1" } } } ] }
(7 rows)

--Testcase 53:
EXECUTE pre_stmt_f_mongo_test(2);
  b  
-----
 Two
(1 row)

-- FDW-297: Only operator expressions should be pushed down in WHERE clause.
--Testcase 54:
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT name, marks FROM f_test_tbl3
  WHERE pass = true
  ORDER BY name;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: name, marks
   Sort Key: f_test_tbl3.name
   ->  Foreign Scan on public.f_test_tbl3
         Output: name, marks
         Filter: f_test_tbl3.pass
         Foreign Namespace: mongo_fdw_regress.test_tbl3
         Query document: { "pipeline" : [ { "$project" : { "name" : { "$numberInt" : "1" }, "marks" : { "$numberInt" : "1" }, "pass" : { "$numberInt" : "1" } } } ] }
(8 rows)

--Testcase 55:
SELECT name, marks FROM f_test_tbl3
  WHERE pass = true
  ORDER BY name;
 name |  marks  
------+---------
 vdd  | {29,31}
(1 row)

-- Cleanup
--Testcase 56:
DELETE FROM f_mongo_test WHERE a != 0;
--Testcase 57:
DROP FOREIGN TABLE f_mongo_test;
--Testcase 58:
DROP FOREIGN TABLE f_test_tbl1;
--Testcase 59:
DROP FOREIGN TABLE f_test_tbl2;
--Testcase 60:
DROP FOREIGN TABLE f_test_tbl3;
--Testcase 61:
DROP USER MAPPING FOR public SERVER mongo_server;
--Testcase 62:
DROP SERVER mongo_server;
--Testcase 63:
DROP EXTENSION mongo_fdw;
