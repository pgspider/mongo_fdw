-- Before running this file User must create database json_regress
-- databases on MongoDB with all permission for
-- user with password and ran mongodb_init.sh
-- file to load collections.
\set ECHO none
SET datestyle TO ISO;
--Testcase 1:
CREATE EXTENSION IF NOT EXISTS mongo_fdw;
--Testcase 2:
CREATE SERVER mongo_server FOREIGN DATA WRAPPER mongo_fdw
  OPTIONS (address :MONGO_HOST, port :MONGO_PORT);
--Testcase 3:
CREATE USER MAPPING FOR public SERVER mongo_server;
-- Check fast path for longer strings (at least 16 bytes long)
CREATE FOREIGN TABLE repeat_json_tbl (_id name, x json) SERVER mongo_server OPTIONS (database 'json_regress', collection 'repeat_json_tbl');
INSERT INTO repeat_json_tbl VALUES ('0', ('"'||repeat('.', 12)||'abc"')::json); -- OK
SELECT x FROM repeat_json_tbl;
         x         
-------------------
 "............abc"
(1 row)

DELETE FROM repeat_json_tbl;
INSERT INTO repeat_json_tbl VALUES ('1', ('"'||repeat('.', 12)||'abc\n"')::json); -- OK, legal escapes
SELECT x FROM repeat_json_tbl;
          x          
---------------------
 "............abc\n"
(1 row)

DELETE FROM repeat_json_tbl;
-- test non-error-throwing input
CREATE FOREIGN TABLE pg_input_is_valid_tbl (_id name, x text) SERVER mongo_server OPTIONS (database 'json_regress', collection 'pg_input_is_valid_tbl');
INSERT INTO pg_input_is_valid_tbl VALUES ('0', '{"a":true}');
SELECT pg_input_is_valid(x, 'json') FROM pg_input_is_valid_tbl;
 pg_input_is_valid 
-------------------
 t
(1 row)

DELETE FROM pg_input_is_valid_tbl;
INSERT INTO pg_input_is_valid_tbl VALUES ('1', '{"a":true');
SELECT pg_input_is_valid(x, 'json') FROM pg_input_is_valid_tbl;
 pg_input_is_valid 
-------------------
 f
(1 row)

select * from pg_input_error_info((SELECT x FROM pg_input_is_valid_tbl), 'json');
              message               |                detail                | hint | sql_error_code 
------------------------------------+--------------------------------------+------+----------------
 invalid input syntax for type json | The input string ended unexpectedly. |      | 22P02
(1 row)

DELETE FROM pg_input_is_valid_tbl;
-- Multi-line JSON input to check ERROR reporting
CREATE FOREIGN TABLE json_tbl (_id name, x text)
 SERVER mongo_server OPTIONS (database 'json_regress', collection 'json_tbl');
INSERT INTO json_tbl(x) VALUES ('{
		"one": 1,
		"two":"two",
		"three":
		true}');
SELECT x::json FROM json_tbl; -- OK
              x               
------------------------------
 {                           +
                 "one": 1,   +
                 "two":"two",+
                 "three":    +
                 true}
(1 row)

DELETE FROM json_tbl;
INSERT INTO json_tbl(x) VALUES ('{
		"one": 1,
		"two":,"two",  -- ERROR extraneous comma before field "two"
		"three":
		true}');
SELECT x::json FROM json_tbl;
ERROR:  invalid input syntax for type json
DETAIL:  Expected JSON value, but found ",".
CONTEXT:  JSON data, line 3: 		"two":,...
DELETE FROM json_tbl;
INSERT INTO json_tbl(x) VALUES ('{
		"one": 1,
		"two":"two",
		"averyveryveryveryveryveryveryveryveryverylongfieldname":}');
SELECT x::json FROM json_tbl;
ERROR:  invalid input syntax for type json
DETAIL:  Expected JSON value, but found "}".
CONTEXT:  JSON data, line 4: ...yveryveryveryveryveryveryveryverylongfieldname":}
-- ERROR missing value for last field
DELETE FROM json_tbl;
DROP FOREIGN TABLE json_tbl;
--constructors
-- row_to_json
--Testcase 4:
CREATE FOREIGN TABLE rows (_id name, x int, y text)
 SERVER mongo_server OPTIONS (database 'json_regress', collection 'rows');
--Testcase 5:
EXPLAIN VERBOSE SELECT row_to_json(q,true)
FROM rows q;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.rows q  (cost=0.00..2.50 rows=1000 width=32)
   Output: row_to_json(q.*, true)
   Foreign Namespace: json_regress.rows
   Query document: { "pipeline" : [ { "$project" : { "_id" : { "$numberInt" : "1" }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 6:
SELECT row_to_json(q,true)
FROM rows q;
            row_to_json             
------------------------------------
 {"_id":"60efb2d771ff01801caf2036",+
  "x":1,                           +
  "y":"txt1"}
 {"_id":"60efb2d771ff01801caf2037",+
  "x":2,                           +
  "y":"txt2"}
 {"_id":"60efb2d771ff01801caf2038",+
  "x":3,                           +
  "y":"txt3"}
(3 rows)

--Testcase 7:
EXPLAIN VERBOSE SELECT row_to_json(row((select array_agg(x) as d from generate_series(5,10) x)),false);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Result  (cost=0.09..0.10 rows=1 width=32)
   Output: row_to_json(ROW($0), false)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=0.08..0.09 rows=1 width=32)
           Output: array_agg(x.x)
           ->  Function Scan on pg_catalog.generate_series x  (cost=0.00..0.06 rows=6 width=4)
                 Output: x.x
                 Function Call: generate_series(5, 10)
(8 rows)

--Testcase 8:
SELECT row_to_json(row((select array_agg(x) as d from generate_series(5,10) x)),false);
      row_to_json      
-----------------------
 {"f1":[5,6,7,8,9,10]}
(1 row)

-- anyarray column
analyze rows;
--json_agg
--Testcase 9:
EXPLAIN VERBOSE SELECT json_agg(q ORDER BY x, y)
  FROM rows q;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=54.83..54.84 rows=1 width=32)
   Output: json_agg(q.* ORDER BY x, y)
   ->  Sort  (cost=49.83..52.33 rows=1000 width=160)
         Output: q.*, x, y
         Sort Key: q.x, q.y
         ->  Foreign Scan on public.rows q  (cost=0.00..0.00 rows=1000 width=160)
               Output: q.*, x, y
               Foreign Namespace: json_regress.rows
               Query document: { "pipeline" : [ { "$project" : { "_id" : { "$numberInt" : "1" }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "1" } } } ] }
(9 rows)

--Testcase 10:
  SELECT json_agg(q ORDER BY x, y)
  FROM rows q;
                        json_agg                        
--------------------------------------------------------
 [{"_id":"60efb2d771ff01801caf2036","x":1,"y":"txt1"}, +
  {"_id":"60efb2d771ff01801caf2037","x":2,"y":"txt2"}, +
  {"_id":"60efb2d771ff01801caf2038","x":3,"y":"txt3"}]
(1 row)

--Testcase 11:
UPDATE rows SET x = NULL WHERE x = 1;
--Testcase 12:
EXPLAIN VERBOSE SELECT json_agg(q ORDER BY x NULLS FIRST, y)
  FROM rows q;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=54.83..54.84 rows=1 width=32)
   Output: json_agg(q.* ORDER BY x NULLS FIRST, y)
   ->  Sort  (cost=49.83..52.33 rows=1000 width=160)
         Output: q.*, x, y
         Sort Key: q.x NULLS FIRST, q.y
         ->  Foreign Scan on public.rows q  (cost=0.00..0.00 rows=1000 width=160)
               Output: q.*, x, y
               Foreign Namespace: json_regress.rows
               Query document: { "pipeline" : [ { "$project" : { "_id" : { "$numberInt" : "1" }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "1" } } } ] }
(9 rows)

--Testcase 13:
  SELECT json_agg(q ORDER BY x NULLS FIRST, y)
  FROM rows q;
                         json_agg                          
-----------------------------------------------------------
 [{"_id":"60efb2d771ff01801caf2036","x":null,"y":"txt1"}, +
  {"_id":"60efb2d771ff01801caf2037","x":2,"y":"txt2"},    +
  {"_id":"60efb2d771ff01801caf2038","x":3,"y":"txt3"}]
(1 row)

-- json extraction functions
--Testcase 14:
CREATE FOREIGN TABLE test_json (_id name, json_type text, test_json json)
 SERVER mongo_server OPTIONS (database 'json_regress', collection 'test_json');
--Testcase 15:
EXPLAIN VERBOSE SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'scalar';
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: ((test_json -> 'x'::text))
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "scalar" } } }, { "$project" : { "ref0" : "$test_json.x", "ref1" : "$json_type" } } ] }
(4 rows)

--Testcase 16:
SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'scalar';
 ?column? 
----------
 
(1 row)

--Testcase 17:
EXPLAIN VERBOSE SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'array';
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: ((test_json -> 'x'::text))
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "ref0" : "$test_json.x", "ref1" : "$json_type" } } ] }
(4 rows)

--Testcase 18:
SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'array';
 ?column? 
----------
 [ ]
(1 row)

--Testcase 19:
EXPLAIN VERBOSE SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'object';
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: ((test_json -> 'x'::text))
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "ref0" : "$test_json.x", "ref1" : "$json_type" } } ] }
(4 rows)

--Testcase 20:
SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'object';
 ?column? 
----------
 
(1 row)

--Testcase 21:
EXPLAIN VERBOSE SELECT test_json->'field2'
FROM test_json
WHERE json_type = 'object';
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: ((test_json -> 'field2'::text))
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "ref0" : "$test_json.field2", "ref1" : "$json_type" } } ] }
(4 rows)

--Testcase 22:
SELECT test_json->'field2'
FROM test_json
WHERE json_type = 'object';
 ?column? 
----------
 "val2"
(1 row)

--Testcase 23:
EXPLAIN VERBOSE SELECT test_json->>'field2'
FROM test_json
WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field2'::text)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 24:
SELECT test_json->>'field2'
FROM test_json
WHERE json_type = 'object';
 ?column? 
----------
 val2
(1 row)

--Testcase 25:
EXPLAIN VERBOSE SELECT test_json -> 2
FROM test_json
WHERE json_type = 'scalar';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json -> 2)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "scalar" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 26:
SELECT test_json -> 2
FROM test_json
WHERE json_type = 'scalar';
 ?column? 
----------
 
(1 row)

--Testcase 27:
EXPLAIN VERBOSE SELECT test_json -> 2
FROM test_json
WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json -> 2)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 28:
SELECT test_json -> 2
FROM test_json
WHERE json_type = 'array';
 ?column? 
----------
 "two"
(1 row)

--Testcase 29:
EXPLAIN VERBOSE SELECT test_json -> -1
FROM test_json
WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json -> '-1'::integer)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 30:
SELECT test_json -> -1
FROM test_json
WHERE json_type = 'array';
   ?column?   
--------------
 { "f1" : 9 }
(1 row)

--Testcase 31:
EXPLAIN VERBOSE SELECT test_json -> 2
FROM test_json
WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json -> 2)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 32:
SELECT test_json -> 2
FROM test_json
WHERE json_type = 'object';
 ?column? 
----------
 
(1 row)

--Testcase 33:
EXPLAIN VERBOSE SELECT test_json->>2
FROM test_json
WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 2)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 34:
SELECT test_json->>2
FROM test_json
WHERE json_type = 'array';
 ?column? 
----------
 two
(1 row)

--Testcase 35:
EXPLAIN VERBOSE SELECT test_json ->> 6 FROM test_json WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 6)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 36:
SELECT test_json ->> 6 FROM test_json WHERE json_type = 'array';
  ?column?   
-------------
 [ 1, 2, 3 ]
(1 row)

--Testcase 37:
EXPLAIN VERBOSE SELECT test_json ->> 7 FROM test_json WHERE json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 7)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 38:
SELECT test_json ->> 7 FROM test_json WHERE json_type = 'array';
   ?column?   
--------------
 { "f1" : 9 }
(1 row)

--Testcase 39:
EXPLAIN VERBOSE SELECT test_json ->> 'field4' FROM test_json WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field4'::text)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 40:
SELECT test_json ->> 'field4' FROM test_json WHERE json_type = 'object';
 ?column? 
----------
 4
(1 row)

--Testcase 41:
EXPLAIN VERBOSE SELECT test_json ->> 'field5' FROM test_json WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field5'::text)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 42:
SELECT test_json ->> 'field5' FROM test_json WHERE json_type = 'object';
  ?column?   
-------------
 [ 1, 2, 3 ]
(1 row)

--Testcase 43:
EXPLAIN VERBOSE SELECT test_json ->> 'field6' FROM test_json WHERE json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=32)
   Output: (test_json ->> 'field6'::text)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 44:
SELECT test_json ->> 'field6' FROM test_json WHERE json_type = 'object';
   ?column?   
--------------
 { "f1" : 9 }
(1 row)

--Testcase 45:
EXPLAIN VERBOSE SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'scalar';
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 ProjectSet  (cost=0.00..507.50 rows=100000 width=32)
   Output: json_object_keys(test_json)
   ->  Foreign Scan on public.test_json  (cost=0.00..0.00 rows=1000 width=32)
         Output: _id, json_type, test_json
         Foreign Namespace: json_regress.test_json
         Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "scalar" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 46:
SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'scalar';
ERROR:  cannot call json_object_keys on a scalar
--Testcase 47:
EXPLAIN VERBOSE SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'array';
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 ProjectSet  (cost=0.00..507.50 rows=100000 width=32)
   Output: json_object_keys(test_json)
   ->  Foreign Scan on public.test_json  (cost=0.00..0.00 rows=1000 width=32)
         Output: _id, json_type, test_json
         Foreign Namespace: json_regress.test_json
         Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 48:
SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'array';
ERROR:  cannot call json_object_keys on an array
--Testcase 49:
EXPLAIN VERBOSE SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'object';
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 ProjectSet  (cost=0.00..507.50 rows=100000 width=32)
   Output: json_object_keys(test_json)
   ->  Foreign Scan on public.test_json  (cost=0.00..0.00 rows=1000 width=32)
         Output: _id, json_type, test_json
         Foreign Namespace: json_regress.test_json
         Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 50:
SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'object';
 json_object_keys 
------------------
 field1
 field2
 field3
 field4
 field5
 field6
(6 rows)

-- nulls
--Testcase 51:
EXPLAIN VERBOSE select (test_json->'field3') is null as expect_false
from test_json
where json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=1)
   Output: ((test_json -> 'field3'::text) IS NULL)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 52:
select (test_json->'field3') is null as expect_false
from test_json
where json_type = 'object';
 expect_false 
--------------
 f
(1 row)

--Testcase 53:
EXPLAIN VERBOSE select (test_json->>'field3') is null as expect_true
from test_json
where json_type = 'object';
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=1)
   Output: ((test_json ->> 'field3'::text) IS NULL)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "object" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 54:
select (test_json->>'field3') is null as expect_true
from test_json
where json_type = 'object';
 expect_true 
-------------
 t
(1 row)

--Testcase 55:
EXPLAIN VERBOSE select (test_json->3) is null as expect_false
from test_json
where json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=1)
   Output: ((test_json -> 3) IS NULL)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 56:
select (test_json->3) is null as expect_false
from test_json
where json_type = 'array';
 expect_false 
--------------
 f
(1 row)

--Testcase 57:
EXPLAIN VERBOSE select (test_json->>3) is null as expect_true
from test_json
where json_type = 'array';
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.test_json  (cost=0.00..2.50 rows=1000 width=1)
   Output: ((test_json ->> 3) IS NULL)
   Foreign Namespace: json_regress.test_json
   Query document: { "pipeline" : [ { "$match" : { "json_type" : { "$eq" : "array" } } }, { "$project" : { "test_json" : { "$numberInt" : "1" } } } ] }
(4 rows)

--Testcase 58:
select (test_json->>3) is null as expect_true
from test_json
where json_type = 'array';
 expect_true 
-------------
 t
(1 row)

-- populate_record
--Testcase 59:
create type jpop as (a text, b int, c timestamp);
--Testcase 60:
CREATE DOMAIN js_int_array_1d  AS int[]   CHECK(array_length(VALUE, 1) = 3);
--Testcase 61:
CREATE DOMAIN js_int_array_2d  AS int[][] CHECK(array_length(VALUE, 2) = 3);
--Testcase 62:
CREATE TYPE jsrec AS (
	i int,
	ia _int4,
	ia1 int[],
	ia2 int[][],
	ia3 int[][][],
	ia1d js_int_array_1d,
	ia2d js_int_array_2d,
	t text,
	ta text[],
	c char(10),
	ca char(10)[],
	ts timestamp,
	js json,
	jsb jsonb,
	jsa json[],
	rec jpop,
	reca jpop[]
);
-- test type info caching in json_populate_record()
--Testcase 63:
CREATE FOREIGN TABLE jspoptest (_id name, js json)
 SERVER mongo_server OPTIONS (database 'json_regress', collection 'jspoptest');
--Testcase 64:
SELECT (json_populate_record(NULL::jsrec, js)).* FROM jspoptest;
 i | ia | ia1 | ia2 | ia3 | ia1d | ia2d | t | ta | c | ca | ts | js | jsb |        jsa         |             rec              |                       reca                        
---+----+-----+-----+-----+------+------+---+----+---+----+----+----+-----+--------------------+------------------------------+---------------------------------------------------
   |    |     |     |     |      |      |   |    |   |    |    |    |     | {1,"\"2\"",NULL,4} | (abc,,"2003-01-02 00:00:00") | {"(abc,456,)",NULL,"(,,\"2003-01-02 00:00:00\")"}
(1 row)

--Testcase 65:
SELECT (json_populate_record(NULL::jsrec, js)).* FROM jspoptest;
 i | ia | ia1 | ia2 | ia3 | ia1d | ia2d | t | ta | c | ca | ts | js | jsb |        jsa         |             rec              |                       reca                        
---+----+-----+-----+-----+------+------+---+----+---+----+----+----+-----+--------------------+------------------------------+---------------------------------------------------
   |    |     |     |     |      |      |   |    |   |    |    |    |     | {1,"\"2\"",NULL,4} | (abc,,"2003-01-02 00:00:00") | {"(abc,456,)",NULL,"(,,\"2003-01-02 00:00:00\")"}
(1 row)

--Testcase 66:
DROP TYPE jsrec;
--Testcase 67:
DROP DOMAIN js_int_array_1d;
--Testcase 68:
DROP DOMAIN js_int_array_2d;
--Testcase 69:
CREATE FOREIGN TABLE foo (_id name, serial_num int, name text, type text)
 SERVER mongo_server OPTIONS (database 'json_regress', collection 'foo');
--Testcase 70:
EXPLAIN VERBOSE SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
FROM foo;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=5.00..5.02 rows=1 width=32)
   Output: json_build_object('turbines', json_object_agg(serial_num, json_build_object('name', name, 'type', type)))
   ->  Foreign Scan on public.foo  (cost=0.00..0.00 rows=1000 width=68)
         Output: _id, serial_num, name, type
         Foreign Namespace: json_regress.foo
         Query document: { "pipeline" : [ { "$project" : { "serial_num" : { "$numberInt" : "1" }, "name" : { "$numberInt" : "1" }, "type" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 71:
SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
FROM foo;
                                                                            json_build_object                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"turbines" : { "847001" : {"name" : "t15", "type" : "GE1043"}, "847002" : {"name" : "t16", "type" : "GE1043"}, "847003" : {"name" : "sub-alpha", "type" : "GESS90"} }}
(1 row)

--Testcase 72:
EXPLAIN VERBOSE SELECT json_object_agg(name, type) FROM foo;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=32)
   Output: json_object_agg(name, type)
   ->  Foreign Scan on public.foo  (cost=0.00..0.00 rows=1000 width=64)
         Output: _id, serial_num, name, type
         Foreign Namespace: json_regress.foo
         Query document: { "pipeline" : [ { "$project" : { "name" : { "$numberInt" : "1" }, "type" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 73:
SELECT json_object_agg(name, type) FROM foo;
                        json_object_agg                         
----------------------------------------------------------------
 { "t15" : "GE1043", "t16" : "GE1043", "sub-alpha" : "GESS90" }
(1 row)

--Testcase 74:
INSERT INTO foo VALUES ('60f02fd48ca7854c1731ed54',999999, NULL, 'bar');
--Testcase 75:
EXPLAIN VERBOSE SELECT json_object_agg(name, type) FROM foo;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2.50..2.51 rows=1 width=32)
   Output: json_object_agg(name, type)
   ->  Foreign Scan on public.foo  (cost=0.00..0.00 rows=1000 width=64)
         Output: _id, serial_num, name, type
         Foreign Namespace: json_regress.foo
         Query document: { "pipeline" : [ { "$project" : { "name" : { "$numberInt" : "1" }, "type" : { "$numberInt" : "1" } } } ] }
(6 rows)

--Testcase 76:
SELECT json_object_agg(name, type) FROM foo;
ERROR:  null value not allowed for object key
--Testcase 77:
DROP USER MAPPING FOR public SERVER mongo_server;
--Testcase 78:
DROP EXTENSION mongo_fdw CASCADE;
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to server mongo_server
drop cascades to foreign table repeat_json_tbl
drop cascades to foreign table pg_input_is_valid_tbl
drop cascades to foreign table rows
drop cascades to foreign table test_json
drop cascades to foreign table jspoptest
drop cascades to foreign table foo
